---
title: "Getting Started Fall 2025"
execute:
  echo: true
format:
  html:
    fig-width: 6
    fig-height: 4
    out-width: 60%
    embed-resources: true
---

You will be working together to get up to speed on the "10 Essentials" found here: https://edav.info/learning_R.html

### 1. Meet your group

Who are the members of your group? Tell me a bit about everyone. Where and when did you meet to work on this assignment? Include a group selfie or (Zoom screenshot).

-   We met in the DSI lounge and zoom meeting!

-   Emily Ramond: Undergrad from UCSD in data science, lives in Midtown, worked for three years following undergrad.

-   Ching-Heng Huang: Come from Taiwan, majoring in Quantitative Finance, worked for three years at EY.

-   Chih-Yuan Chang: Also from Taiwan, majoring in psychology and environmental engineering.

-   David Dai: Come from Beijing, majoring in data science at Columbia, undergraduate in Math and DS from NYU.

    ![](images/clipboard-516593584.png)

-   ![](images/clipboard-1028541124.png)

### 2. Install R and RStudio

If they're already installed, update to the latest versions. Run this code:

```{r}
R.version$version.string
```

Run this line *in the Console* and copy and paste the results below.

`rstudioapi::getVersion()`<br> \[1\] ‘2025.5.1.513’

### 3. Get comfortable with RStudio.

Install the **tidyverse** collection of packages as well as **devtools**. Run this code:

```{r}
# install.packages("tidyverse")
# install.packages("devtools")
find.package("tidyverse")
find.package("devtools")
```

### 4. Nuts and Bolts

Get comfortable with vectors and data frames. Create a data frame called `df` below with columns that are each a different data type: integer, numeric, character, logical, and factor. Run the code:

```{r}
# Add your data frame here
# integer
age <- as.integer(c(24, 25, 26, 25))
# numeric
age_d <- c(24.7, 25.1, 26.4, 25.2)
# character
name <- c("Emily","David","Cheng-Heng", "Chih-Yuan")
# logical
DSI <- c(TRUE, TRUE, TRUE, TRUE)
# factor
bday = factor(c("Feb","March","May","July"))
# Create data frame df
df = data.frame(Name=name, Age=age, Age_approx=age_d,DSI_student=DSI, bday=bday)
df
```

### 5. Make some graphs with ggplot2

Use data from the *bad_drivers* dataset in the **fivethirtyeight** package.

No rules... have fun!

```{r}
#install.packages("fivethirtyeight")
#install.packages("dplyr")
#install.packages("ggplot2")
```

```{r}
# Import packages
library(ggplot2)
library(stats)
library(stringr)
suppressMessages(library(fivethirtyeight))
suppressMessages(library(dplyr))
```

```{r}
# Inspect data
data <- as.data.frame(bad_drivers)
head(data)
```

#### Make some plots with bad_drivers

```{r}
# 1. Frequency Histogram of perc_alcohol
ggplot(data,aes(perc_alcohol)) +
  ggtitle("Frequency Histogram of perc_alcohol") +
  geom_histogram(color = "blue", fill = "lightBlue", binwidth = 5, center = 52.5)
```

```{r}
# 2. Scatter plot of Perc Alcohol vs. Losses
ggplot(data, aes(perc_alcohol, losses, size = perc_speeding)) +
  geom_point(colour = 'orange', alpha = 0.7) +
  ggtitle("Scatter plot of Perc Alcohol vs. Losses with ggplot2")
```

```{r}
ggplot(data, aes(perc_alcohol)) +
  geom_density(fill = "lightblue", alpha = 0.4) +
  geom_rug(alpha = 0.4) +
  geom_vline(aes(xintercept = mean(perc_alcohol, na.rm = TRUE)),
             linetype = 2, color = "steelblue") +
  ggtitle("Density of perc_alcohol (with mean)")
```

```{r}
ggplot(data, aes(insurance_premiums, losses)) +
  stat_density_2d_filled(contour_var = "ndensity", alpha = 0.8) +
  ggtitle("Insurance Premiums vs Losses (2D density)") +
  labs(fill = "Norm. Density")
```

```{r}
# 3. Scatter Plot of Insurance Premiums vs Losses

# Define a linear fit layer
linearfit <- geom_smooth(
  method = "lm", 
  se = FALSE, 
  colour = alpha("lightblue", 0.9),
  linewidth = 2
)

# Perform a correlation test between insurance_premiums and losses, 
# then store the correlation coefficient and p-value
corr_test <- cor.test(data$insurance_premiums, data$losses)
corr <- corr_test$estimate
p <- corr_test$p.value

# Create a scatter plot
ggplot(data, aes(insurance_premiums, losses)) + 
  geom_point() +
  ggtitle("Insurance Premiums vs Losses with ggplot2") +
  linearfit +
  annotate("text", x = 730, y = 200,
           label = sprintf("r = %.3f, p = %.3e", corr, p))
```

### 6. Practice using the main **dplyr** verbs for data transformation.

Try out the following `filter()`, `select()`, `mutate()`, `arrange()`, `group_by` and `summarize()` using data from the *foul_balls* dataset in the **fivethirtyeight** package.

```{r}
# Inspect data
foul_balls_df <- as.data.frame(foul_balls)
head(foul_balls_df)
```

```{r}
# Filter: Filter where type_of_hit == Fly
head(filter(foul_balls_df, type_of_hit == "Fly"))
```

```{r}
# Filter: Filter where data starts with Seattle (where emily lived past 3 years)
head(filter(foul_balls_df, str_detect(matchup, "^Seattle")))
```

```{r}
# Select: Select columns from foul_balls_df where column names start with "match"
head(select(foul_balls_df, starts_with("match")))
```

```{r}
# Mutate: Create perc_velocity = exit_velocity / 100
head(mutate(foul_balls_df, perc_velocity = exit_velocity /100))
```

```{r}
# Arrange: Sort foul_balls_df by type_of_hit (batter hits self lollol)
head(arrange(foul_balls_df, type_of_hit))
```

```{r}
# Groupby: Compute the mean of exit_velocity by each type_of_hit (ignoring NAs)
foul_balls_df |>
  dplyr::group_by(type_of_hit) |>
  dplyr::summarise(mean_velocity = mean(exit_velocity, na.rm = TRUE))

```

```{r}
# Summarize: Compute total exit_velocity by type_of_hit (ignoring NAs)
summarize(foul_balls_df, sum_velocity = sum(exit_velocity,na.rm = TRUE), .by=type_of_hit)
```

### 7. Summary

Describe any questions / issues that came up and the solutions.

1.  We had some issues with how to read in data and transform data types to the correct format. We used the documentation for R to discover how to do this.
2.  For ggplot2 plotting, we referred to the **ggplot2** online book ([https://ggplot2-book.org/](#0)) to check common syntax patterns. All code was run locally and cross-checked with official documentation.

Describe AI use, including screenshots, model names/versions as relevant. What helped? What didn't?

1.  What model?\

-   When we searched on Google, Gemini(2.5 Flash) appeared as a helpful tool, and we used it to collect guidance on R functions.

2.  What helped?\

-   It significantly reduced the amount of time we would have otherwise spent searching extensive documentation and data, allowing us to understand the purpose of each function more efficiently.

3.  What didn't?\

-   However, Gemini sometimes did not provide concrete usage examples, which caused some confusion and required us to consult additional resources.

![](images/clipboard-906025595.png)
